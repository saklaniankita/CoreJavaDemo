1. If a parent class has implemented Serializable interface then child class doesn’t need to implement
   it but vice-versa is not true.
2. Only non-static data members are saved via Serialization process.
3. Static data members and transient data members are not saved via Serialization process.
   So, if you don’t want to save value of a non-static data member then make it transient.
4. Constructor of object is never called when an object is deserialized.
5. Associated objects must be implementing Serializable interface.


--->
Notice that both methods are (and must be) declared private, proving that neither method is inherited and overridden
 or overloaded. The trick here is that the virtual machine will automatically check to see if either method is 
 declared during the corresponding method call. The virtual machine can call private methods of your class 
 whenever it wants but no other objects can. 
 
 
--->If the object to be serialized includes references to the other objects, then all those object’s state 
also will be saved as the part of the serialized state of the object in question. The whole object graph of 
the object to be serialized will be saved during serialization automatically provided all the objects included 
in the object’s graph are serializable.

--->If you try to serialize an object of a class which does not implements serializable, 
‘NotSerializableException’ will be thrown at runtime. (EX: NonSerializable.java)
--->If we try to serialize an object of a class which implements serializable but contains a 
reference that does not implement Serializable, then it throws IOException (EX: SerializableTest.java)
--->NotSerializableException is subclass of IOException

--->
private void writeObject(ObjectOutputStream os) { 
    try { 
      os.defaultWriteObject(); 
      os.writeInt(noOfTranVar); 
    } catch (Exception e) {  e.printStackTrace(); } 
  } 
  
private void readObject(ObjectInputStream is) { 
 try { 
  is.defaultReadObject(); 
   noOfTransients =  (is.readInt()); 
 } catch (Exception e) { 
   e.printStackTrace(); } 
 } 
 
 The value of transient variable ‘noOfTranVar’ is saved as part of the serialized object
 manually by implementing writeObject() and restored by implementing readObject().
 The normal serializable variables are saved and restored by calling defaultWriteObject()
 and defaultReadObject()respectively. These methods perform the normal serialization and 
 de-sirialization process for the object to be saved or restored respectively.
 
 
 --->
 Q13) If a class is serializable but its superclass in not, what will be the state of the instance variables
 inherited from super class after deserialization?

Ans) The values of the instance variables inherited from superclass will be reset to the values they were 
given during the original construction of the object as the non-serializable super-class constructor will run

--->
If Parent class is Serializable then child class is by default Serializable

--->
What is use of serialVersionUID?

Ans) During object serialization, the default Java serialization mechanism writes the metadata about the object, 
which includes the class name, field names and types, and superclass. This class definition is stored as a part of 
the serialized object. This stored metadata enables the deserialization process to reconstitute the objects and map 
the stream data into the class attributes with the appropriate type
Everytime an object is serialized the java serialization mechanism automatically computes a hash value. 
ObjectStreamClass's computeSerialVersionUID() method passes the class name, sorted member names, modifiers, 
and interfaces to the secure hash algorithm (SHA), which returns a hash value.The serialVersionUID is also 
called suid.
So when the serilaize object is retrieved , the JVM first evaluates the suid of the serialized class and 
compares the suid value with the one of the object. If the suid values match then the object is said to be 
compatible with the class and hence it is de-serialized. If not InvalidClassException exception is thrown.
