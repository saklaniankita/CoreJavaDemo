-> A Program is a set of instructions for a computer to perform
-> The program under execution is called a Process
-> Thread is the segment of a process which means a process can have multiple threads and these multiple threads
   are contained within a process
-> Switching between multiple threads within a SINGLE process(Multithreading/Concurrency/Multitasking) is FASTER than
   switching between multiple processes(Multiprocessing/MicroServices)
-> each thread within the same process has its own Stack and Instruction pointer.
   Rest of the things like process files, process metadata, code, the heap etc are shared by all
   the threads within the process
-> all threads within the process can share resources. So when we have multiple tasks that are
   related and share resources, we should go for Multithreading
-> But when working with unrelated tasks, Multiprocessor environment is better.
   Also when Security is most important, we should never go for multithreaded environment
   because in multithreaded environment resources are shared and thus not secured
-> Context Switch between threads of same or different processes :
		stop thread1, schedule out thread1, schedule thread2 in, start thread2 and so on..
-> This scheduling of threads is achieved by Operating System
-> Context switching between threads of same process is faster and cheaper than Context switching
   between different processes. There is too much information in a process that would have to be saved
   and reloaded each time the CPU decides to switch processes.

-> Thread.sleep(1000): It always pauses the current thread execution.
   Current thread goes into TIMED_WAITING state for the specified number of milliseconds.
   Thread.sleep() doesn’t lose any monitors or lock the current thread has acquired.
   Any other thread can interrupt the current thread in sleep, and in such cases InterruptedException is thrown.

-> Compare the wait () and sleep () methods in Java :

    wait() pauses the thread until the specified number of milliseconds have elapsed or until it receives the
    desired notification from another thread by notify()/notifyAll() – these happen without keeping a hold on
    the monitor/lock of the shared object. Current thread goes to WAITING state

    sleep() blocks operations that keep a hold on the monitor/lock of the shared object for the specified
    number of milliseconds. Current thread goes to TIMED_WAITING state.

    Overall, wait() is used in multithreaded applications with notify() or notifyALL() to synchronize and
    avoid race conditions. On the other hand, sleep () is using for polling or to check determined results.

-> We can use join() method to make sure that threads execute in a particular order.
   Before we start second thread , we call join on first thread so that second starts only after first is terminated

-> Extends Thread OR Implement Runnable : Implementing Runnable interface is always better because that way the code
   segregated. And if you extend Thread class then you can not extend any other class because Java does NOT
   support Multiple Inheritance

-> A CPU core is a CPUís processor. In the old days, every processor had just one core that could focus
   on one task at a time. Today, CPUs have been two and 18 cores, each of which can work on a different task.

   A core can work on one task, while another core works a different task, so the more cores a CPU has,
   the more efficient it is. Many processors, especially those in laptops, have two cores,
   but some laptop CPUs (known as mobile CPUs), such as Intelís 8th Generation processors, have four.
   You should shoot for at least four cores in your machine if you can afford it.

   Most processors can use a process called simultaneous multithreading or, if itís an Intel processor, Hyper-threading
  (the two terms mean the same thing) to split a core into virtual cores, which are called threads.
  For example, AMD CPUs with four cores use simultaneous multithreading to provide eight threads,
  and most Intel CPUs with two cores use Hyper-threading to provide four threads.