
Locks at Object or Class level : ??

VOLATILE : ->Atomic Opertaions do not need any sychronization
		   ->All getters & setter methods are atomic
		   ->Assigments to all primitive data types( int, short, byte, float, char, boolean) are atomic
		   ->BUT assigment to primitve datatypes(long and double) are NOT atomic because they are 64 bit and there
		   is a possibility that the write to long/double variable is completed in two operations: One to lower
		   32 bits and other to upper 32 bit
		   -> So we needto put "volatile" keyword so that reads and writes to long/double variables become
		   thread safe and atomic.   
		   ** java.util.concurrent.atomic package contain classes that address these synchronization issues
		   
		   -> Volatile keyword tells the compiler to store the value of volatile keyword directly in the
		   main memory and NOT to cache it.
		   **Threads can have their own copy of data for variables, and the thread copy can be different 
		   from the "main" memory that holds the current and "correct" value. But for a volatile variable,
		   all threads see the same value from the main memory.
		   
DIFFERENCE BETWEEN SYNCHRONIZATION & VOLATILE KEYWORD is just that synchronization involves thread to obtain
lock, execute lines of code within the block and then release the lock. No locks involved in Volatile keyword
So Synchronization has more overhead BUT Volatile can just synchronize a variable and NOT the complete block 
of code as done by Synchronized keyword

		   

RACE CONDITION : When two threads are trying to access a shared resource simultaneously , 
	then the value of that shared resource can get corrupted.
	->It generally happens when NON ATOMIC operations(i++, i--, etc) are performed on the shared resource.
	->Lines of code which may cause the corrupt value is called the critical section
	->To avoid Race condition, we use synchronization so that the critical section is accessed by just one 
	  thread at a time
	->Synchronization is acheived through synchronized method or block
	
DATA RACE : CPU and Compiler may execute the lines of code out of order to optimize performance and speed up the code
			-> But they will do so while maintaing the logical correctness of the code
			-> For Ex: the following lines of code would NEVER run out of order because lines are dependent on each other
							{
								x = 1;
								y = x+2;
								z = y+10;
							}
			So we will never experience a Data Race here.
			-> But a code like this :
			       public void increment1(){
			       		x++;
			       		y++;
			       	}
			   can experience Data Race because the lines of code here are independent. So the CPU and Compiler
			   can execute it as follows to optimize performance:
			   		public void increment1(){
			       		y++;
			       		x++;
			       	}
			However, above holds true only for a single threaded environment.
			In multithreaded environment, sequence of operations does matter. But the CPU ad Compiler are not aware
			that there exists more threads on other core that relies on a particular order of execution,and this may
			lead to incorrect results.
			
=> SOLUTION
 1. SYNCHRONIZATION of methods that modify shared variables
 		Solves both Race Condition & Data Race.
 2. Declaration of shared variables with VOLATILE keyword : 
       -> Solves Race Condition while read/write to/from long & double variable
       -> Solves all Data Race Conditons by guaranteeing order of execution.
    It makes sure that code that come before the volatile shared variable(VSV) will be exeuted 
    before and that comes after the VSV will be exceuted after the VSV
    SO, in the above code , if we declare the variables x and y as Volatile
    			public volatile int x = 0;
    			public volatile int y = 0;
    then, even in the multithreaded environment, there would be no incorrect results.
    
    As a rule of thumb, any variable which may be shared among multiple threads in a multithreaded environment
    should be either 
        -> Declared Volatile
        			OR
        -> Guarded by synchronized blcok
    
			
	
		   


	