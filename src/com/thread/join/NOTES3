SYNCHRONIZED METHOD Vs SYNCHRONIZED BLOCK :
			public class Program {
					  private static Object locker1 = new Object();
					  private static Object locker1 = new Object();
					  public void doSomething1() {
						    ...
						    synchronized(locker1) {   //First Synchronized Block
						      ......... //do something protected;
						    }
						    ....
					  }
					  public void doSomething2() {
						    ...
						    synchronized(locker2) {    //Second Synchronized Block
						      ......... //do something protected;
						    }
						    ....
					  }
			}
			
->	Multiple threads can not enter a synchronized block. ONly thread that has acquired lock "locker1" will enter
	First Synchronized Block and some other thread that has acquired the lock locker2 will enter Secong Synchronized 
	Block
->  Those two threads can access the synchronized block at the sametime
->  Unlike synchronized block, Synchronized methods synchronizes on the object instance or the Class.
->  A thread only executes a synchronized method after it has acquired the lock for the method's object or class.
		-> Static synchronized methods synchronize on the class object. 
		  If one thread is executing a static synchronized method, 
		  all other threads trying to execute any static synchronized methods, in the same class, will block.
        -> Non-static synchronized methods synchronize on "this" (the instance object). 
          If one thread is executing a synchronized method, 
          all other threads trying to execute any synchronized methods, in the same class, will block.

