-> Concurrency = Multitasking = Switching between threads. It can be acheived even within a single processor.
-> Switching between multiple threads within a process(Multitreading) is FASTER than switching between multiple 
   processes(Multiprocessing/MicroServices)
-> each thread within the same process has its own Stack and Instruction pointer. 
   Rest of the things like process files, process metadata, code, the heap etc are shared by all 
   the threads within the process
-> all threads within the process can share resources. So when we have multiple tasks that are 
   related and share resources, we should go for Multithreading
-> But when working with unrelated tasks, Multiprocessor environment is better. 
   Also when Security is most important, we should never go for multithreaded environment 
   because in multithreaded environment resources are shared and thus not secured
-> Context Switch between threads of same or different processes :
		stop thread1, schedule out thread1, schedule thread2 in, start thread2 and so on..
-> This scheduling of threads is acheived by Operating System
-> Context switching between threads of same process is faster and cheaper than Context switching 
   between different processes. There is too much information in a process that would have to be saved 
   and reloaded each time the CPU decides to switch processes.

-> Thread.sleep(1000) : It tells the operating system not to schedule any thread unitl 1000ms passes. 
   During this time this thread makes no CPU Usage
   
-> Extends Threda OR Implement Runnable : Implementing Runnable interface is always better because that way the code
   segregated. And if you extend Thread class then you can not extend any other class because Java does NOT
   support Multiple Inheritance
   
-> A CPU core is a CPU’s processor. In the old days, every processor had just one core that could focus 
   on one task at a time. Today, CPUs have been two and 18 cores, each of which can work on a different task.

   A core can work on one task, while another core works a different task, so the more cores a CPU has, 
   the more efficient it is. Many processors, especially those in laptops, have two cores, 
   but some laptop CPUs (known as mobile CPUs), such as Intel’s 8th Generation processors, have four. 
   You should shoot for at least four cores in your machine if you can afford it.

   Most processors can use a process called simultaneous multithreading or, if it’s an Intel processor, Hyper-threading 
  (the two terms mean the same thing) to split a core into virtual cores, which are called threads. 
  For example, AMD CPUs with four cores use simultaneous multithreading to provide eight threads, 
  and most Intel CPUs with two cores use Hyper-threading to provide four threads.