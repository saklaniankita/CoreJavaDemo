Why do we need Executor framework?
-> We mange threads is more efficient way than manual thread management
-> Instead of creating a new thread for every task, we create a thread pool that has fixed number of threads and
   reuse those threads when a new task arrives. If all the threads in the thread pool are busy, the new task that has
   arrived will wait in a queue until a thread inside the thread pool becomes available. So it improves Concurrency
-> Steps to be followed
    1. Create thread Pool using Executors
                  ExecutorService threadPool = Executors.newFixedThreadPool(5)

    2. Create set of tasks(Runnable Object) to execute
                   Runnable task = new WorkerThread(i);

    3. Pass those tasks to Executor Pool. Extra tasks will wait in queue
                   threadPool.execute(task);
        Executes the given command at some time in the future.
        The command may execute in a new thread, in a pooled thread, or in the calling thread

    4. Shutdown the Executor Pool
                   threadPool.shutdown();

-> Types of Thread Pool
    1. Fixed Thread Pool: newFixedThreadPool(int) Creates a fixed size thread pool

    2. Cached Thread Pool: newCachedThreadPool() Creates a thread pool that creates new threads as
       needed, but will reuse previously constructed threads when they are available

    3. Scheduled Thread Pool: newScheduledThreadPool(int) This thread pool runs tasks after a given delay or periodically.
        It internally creates a Fixed Thread Pool with the size given in argument.

    4. Single Thread Pool: newSingleThreadExecutor() Creates a single thread. Buy why do we even need a thread pool with
        just single thread when ee can create a single thread itself. Threads can only handle Runnable tasks, whereas
        a single thread executor service can execute both Runnable and Callable tasks.
        Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time